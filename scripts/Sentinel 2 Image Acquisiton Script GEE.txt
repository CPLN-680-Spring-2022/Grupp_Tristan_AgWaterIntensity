// This is javascript code used in Google Earth Engine. A link to the script can be found here: https://code.earthengine.google.com/e091d93b4702c278c009d07ede49c734

//This code creates a mosiac from a cloud filtered and masked Sentinel-2 image collection.

// Define variables
var AOI = geometry
var START_DATE = '2021-1-16'
var END_DATE = '2021-1-31'
var CLOUD_FILTER = 90
var CLD_PRB_THRESH = 50
var NIR_DRK_THRESH = 0.15
var CLD_PRJ_DIST = 1
var BUFFER = 50


function get_s2_sr_cld_col(aoi, start_date, end_date){
    // Import and filter S2
    var s2_sr_col = (ee.ImageCollection('COPERNICUS/S2_SR')
        .filterBounds(aoi)
        .filterDate(start_date, end_date)
        .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', CLOUD_FILTER)))

    // Import and filter s2cloudless.
    var s2_cloudless_col = (ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY')
        .filterBounds(aoi)
        .filterDate(start_date, end_date))

    // Join the filtered s2cloudless collection to the SR collection by the 'system:index' property.
    return ee.ImageCollection(ee.Join.saveFirst('s2cloudless').apply({
        'primary': s2_sr_col,
        'secondary': s2_cloudless_col,
        'condition': ee.Filter.equals({
            'leftField': 'system:index',
            'rightField': 'system:index'
        })
    }))
}

var s2_sr_cld_col_eval = get_s2_sr_cld_col(AOI, START_DATE, END_DATE)
print(s2_sr_cld_col_eval)

// CLOUD COMPONENTS
// Define a function to add the s2cloudless probability layer and derived cloud mask as bands to an S2 SR image input.
function add_cloud_bands(img){
    // Get s2cloudless image, subset the probability band.
    var cld_prb = ee.Image(img.get('s2cloudless')).select('probability')
    // Condition s2cloudless by the probability threshold value.
    var is_cloud = cld_prb.gt(CLD_PRB_THRESH).rename('clouds')
    // Add the cloud probability layer and cloud mask as image bands.
    return img.addBands(ee.Image([cld_prb, is_cloud]))
}


// SHADOW COMPONENTS
function add_shadow_bands(img){
    // Identify water pixels from the SCL band.
    var not_water = img.select('SCL').neq(6)
    // var not_water = img.normalizedDifference(['B3', 'B8']).lt(0.2) // Use this if you are using the TOA version
    // Identify dark NIR pixels that are not water (potential cloud shadow pixels).
    var SR_BAND_SCALE = 1e4
    var dark_pixels = img.select('B8').gt(NIR_DRK_THRESH*SR_BAND_SCALE).multiply(not_water).rename('dark_pixels')
    // Determine the direction to project cloud shadow from clouds (assumes UTM projection).
    var shadow_azimuth = ee.Number(90).subtract(ee.Number(img.get('MEAN_SOLAR_AZIMUTH_ANGLE')));
    // Project shadows from clouds for the distance specified by the CLD_PRJ_DIST input.
    var cld_proj = (img.select('clouds').directionalDistanceTransform(shadow_azimuth, CLD_PRJ_DIST*10)
        .reproject({'crs': img.select(0).projection(), 'scale': 100})
        .select('distance')
        .mask()
        .rename('cloud_transform'))
    // Identify the intersection of dark pixels with cloud shadow projection.
    var shadows = cld_proj.multiply(dark_pixels).rename('shadows')
    // Add dark pixels, cloud projection, and identified shadows as image bands.
    return img.addBands(ee.Image([dark_pixels, cld_proj, shadows]))
}

function add_cld_shdw_mask(img){
    // Add cloud component bands.
    var img_cloud = add_cloud_bands(img)
    // Add cloud shadow component bands.
    var img_cloud_shadow = add_shadow_bands(img_cloud)

    // Combine cloud and shadow mask, set cloud and shadow as value 1, else 0.
    var is_cld_shdw = img_cloud_shadow.select('clouds').add(img_cloud_shadow.select('shadows')).lt(1) // value here was originally .gt(0) at the end

    // Remove small cloud-shadow patches and dilate remaining pixels by BUFFER input.
    // 20 m scale is for speed, and assumes clouds don't require 10 m precision.
    var is_cld_shdw2 = (is_cld_shdw.focal_min(2).focal_max(BUFFER*2/20)
        .reproject({'crs': img.select([0]).projection(), 'scale': 20})
        .rename('cloudmask'))

    // Add the final cloud-shadow mask to the image.
    return img_cloud_shadow.addBands(is_cld_shdw2)
}

var img = s2_sr_cld_col_eval.map(add_cld_shdw_mask)
var img = img.max() //  


var clouds = img.select('clouds').selfMask()
var shadows = img.select('shadows').selfMask()
var dark_pixels = img.select('dark_pixels').selfMask()
var probability = img.select('probability')
var cloudmask = img.select('cloudmask').selfMask() //it appears clouds are represented as 1s and all other values are nulls. reclassify 1s to 0s and nulls to 1s.
var cloudmask2 = cloudmask.where(cloudmask.gt(0).and(cloudmask.lte(0)),1).where(cloudmask.gt(1).and(cloudmask.lte(1)),0)
var cloud_transform = img.select('cloud_transform')

var imgmask = img.multiply(cloudmask).multiply(dark_pixels)
//img.multiply(cloud_transform).multiply(dark_pixels).multiply(shadows).multiply(cloudmask)

//Map.addLayer(imgmask, {bands: ['B8', 'B3', 'B4'], min: 0, max: 3000}, 'Masked Image');
//Map.centerObject(AOI, 13)
//Map.addLayer(img, {bands: ['B8', 'B3', 'B4'], min: 0, max: 3000}, 'Image');
//Map.addLayer(clouds, {}, 'Clouds');
//Map.addLayer(shadows, {}, 'Shadows');
//Map.addLayer(dark_pixels, {}, 'dark_pixels');
//Map.addLayer(probability, {}, 'Probablity');
//Map.addLayer(cloudmask, {}, 'Cloud Mask');
//Map.addLayer(cloud_transform, {}, 'Cloud Transform');

var nir = imgmask.select('B8');
var red = imgmask.select('B4');
var ndvi = nir.subtract(red).divide(nir.add(red))


var palette = ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
               '74A901', '66A000', '529400', '3E8601', '207401', '056201',
               '004C00', '023B01', '012E01', '011D01', '011301'];
Map.addLayer(ndvi, {min: 0, max: 1, palette: palette}, 'NDVI')


Export.image.toDrive({
      image: ndvi,
      description: 'NDVIreclass_coefficients'.concat('_', START_DATE).concat('_', END_DATE),
      scale: 10,
      //fileFormat: 'GeoTIFF',
      maxPixels: 3784216672400,
      folder : 'Peru NDVI Sentinel2 - two week periods',
      region: geometry4
});














////// Check Mask Values !
// Check raster values of cloud mask
var region_cloudmask = geometry2

var region_cloudmaskoutside = geometry3

// Reduce the region to a mD "mean dictionary". The region parameter is the Feature geometry.
var mD_cloudmask = cloudmask.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: region_cloudmask,
  scale: 10,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print(mD_cloudmask);

